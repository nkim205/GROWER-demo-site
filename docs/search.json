[
  {
    "objectID": "demo.html",
    "href": "demo.html",
    "title": "Mean Temperature By Season (GA, TX)",
    "section": "",
    "text": "GA Autumn"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "GROWER Quarto Demo Home Page",
    "section": "",
    "text": "Welcome to my Quarto website hosted via GitHub Pages!\n\n\n\nMountain Goat At Glacier National Park by me"
  },
  {
    "objectID": "images.html",
    "href": "images.html",
    "title": "Astrophotograhy Images",
    "section": "",
    "text": "Orion, Horsehead, and Flame Nebula\n\n\n\n\n\nThe Moon\n\n\nAll images on this page were captured by me"
  },
  {
    "objectID": "index.html#welcome-to-my-quarto-website-hosted-via-github-pages",
    "href": "index.html#welcome-to-my-quarto-website-hosted-via-github-pages",
    "title": "GROWER Quarto Demo Website",
    "section": "",
    "text": "Astrophotography and Customer Data\nSmiley Face Graph\n\n\n\nMountain Goat At Glacier National Park by me"
  },
  {
    "objectID": "nhgis0002_shape/nhgis0002_shapefile_tl2023_us_zcta_2023/SeasonalTemperatures.html",
    "href": "nhgis0002_shape/nhgis0002_shapefile_tl2023_us_zcta_2023/SeasonalTemperatures.html",
    "title": "GROWER-demo-site",
    "section": "",
    "text": "import os\nimport rasterio\nimport geopandas as gpd\nimport numpy as np\nimport pandas as pd\nfrom shapely.geometry import mapping, box\nfrom rasterio.mask import mask\nfrom IPython.display import display\nimport matplotlib.pyplot as plt\n\n\nraster_files = [\n    \"/Users/Rk/Downloads/School/GROWER/SpringTask2/PRISM_tmean_stable_4kmM3_2023_all_bil/PRISM_tmean_stable_4kmM3_202301_bil.bil\",\n    \"/Users/Rk/Downloads/School/GROWER/SpringTask2/PRISM_tmean_stable_4kmM3_2023_all_bil/PRISM_tmean_stable_4kmM3_202302_bil.bil\",\n    \"/Users/Rk/Downloads/School/GROWER/SpringTask2/PRISM_tmean_stable_4kmM3_2023_all_bil/PRISM_tmean_stable_4kmM3_202312_bil.bil\",\n]\n\nshapefile_path = \"/Users/Rk/Downloads/School/GROWER/SpringTask2/nhgis0002_shape/nhgis0002_shapefile_tl2023_us_zcta_2023/US_zcta_2023.shp\"\n\nzip_field = \"ZCTA5CE20\"\n\nzip_intervals = [(30000, 31999), (39800, 39999)]\n\nscale_factor = 1.0\n\n\ndef zip_in_intervals(zip_val, intervals):\n    try:\n        z = int(zip_val)\n        for (low, high) in intervals:\n            if low &lt;= z &lt;= high:\n                return True\n        return False\n    except (ValueError, TypeError):\n        return False\n\n\nzip_gdf = gpd.read_file(shapefile_path)\ndisplay(zip_gdf.head())\n\n# Filter the GeoDataFrame based on the provided zip_intervals.\nfiltered_gdf = zip_gdf[zip_gdf[zip_field].apply(lambda z: zip_in_intervals(z, zip_intervals))].copy()\nprint(f\"Number of ZIP-code polygons after filtering: {len(filtered_gdf)}\")\ndisplay(filtered_gdf.head())\n\n\n\n\n\n\n\n\nGISJOIN\nZCTA5CE20\nGEOID20\nGEOIDFQ20\nCLASSFP20\nMTFCC20\nFUNCSTAT20\nALAND20\nAWATER20\nINTPTLAT20\nINTPTLON20\nShape_Leng\nShape_Area\nORIG_FID\ngeometry\n\n\n\n\n0\nG00601\n00601\n00601\n860Z200US00601\nB5\nG6350\nS\n166848592.0\n798613.0\n+18.1805555\n-066.7499615\n82697.360499\n1.676472e+08\n8825\nPOLYGON ((3174440.254 -1631886.38, 3174447.084...\n\n\n1\nG00602\n00602\n00602\n860Z200US00602\nB5\nG6350\nS\n78546711.0\n4428428.0\n+18.3619450\n-067.1755974\n50765.076072\n7.876919e+07\n8892\nPOLYGON ((3118392.408 -1625931.35, 3118394.308...\n\n\n2\nG00603\n00603\n00603\n860Z200US00603\nB5\nG6350\nS\n88980555.0\n6253316.0\n+18.4573986\n-067.1248670\n55417.260840\n8.914236e+07\n8802\nPOLYGON ((3117543.256 -1612404.317, 3117547.37...\n\n\n3\nG00606\n00606\n00606\n860Z200US00606\nB5\nG6350\nS\n114825641.0\n12228.0\n+18.1583269\n-066.9329285\n78796.420501\n1.148379e+08\n8815\nPOLYGON ((3154840.517 -1638879.219, 3154862.89...\n\n\n4\nG00610\n00610\n00610\n860Z200US00610\nB5\nG6350\nS\n96150194.0\n4289688.0\n+18.2953043\n-067.1251799\n68201.943372\n9.677966e+07\n8826\nPOLYGON ((3129371.721 -1631728.349, 3130354.02...\n\n\n\n\n\n\n\nNumber of ZIP-code polygons after filtering: 751\n\n\n\n\n\n\n\n\n\nGISJOIN\nZCTA5CE20\nGEOID20\nGEOIDFQ20\nCLASSFP20\nMTFCC20\nFUNCSTAT20\nALAND20\nAWATER20\nINTPTLAT20\nINTPTLON20\nShape_Leng\nShape_Area\nORIG_FID\ngeometry\n\n\n\n\n9755\nG30002\n30002\n30002\n860Z200US30002\nB5\nG6350\nS\n4396684.0\n35621.0\n+33.7733346\n-084.2616669\n15215.757214\n4.432313e+06\n8988\nPOLYGON ((1077914.053 -348863.734, 1077946.386...\n\n\n9756\nG30004\n30004\n30004\n860Z200US30004\nB5\nG6350\nS\n150061243.0\n1833185.0\n+34.1456348\n-084.2918814\n111252.827546\n1.518944e+08\n10167\nPOLYGON ((1076462.385 -310484.892, 1076425.655...\n\n\n9757\nG30005\n30005\n30005\n860Z200US30005\nB5\nG6350\nS\n40898014.0\n897460.0\n+34.0890498\n-084.2170187\n44413.582070\n4.179547e+07\n10173\nPOLYGON ((1080231.492 -315323.551, 1080270.3 -...\n\n\n9758\nG30008\n30008\n30008\n860Z200US30008\nB5\nG6350\nS\n24713437.0\n27393.0\n+33.9005668\n-084.5909235\n40124.671955\n2.474083e+07\n7121\nMULTIPOLYGON (((1041671.072 -344769.488, 10416...\n\n\n9759\nG30009\n30009\n30009\n860Z200US30009\nB5\nG6350\nS\n23587579.0\n200005.0\n+34.0781363\n-084.3034243\n43656.113886\n2.378760e+07\n10176\nMULTIPOLYGON (((1066024.52 -315541.079, 106601...\n\n\n\n\n\n\n\n\nwith rasterio.open(raster_files[0]) as src_ref:\n    raster_crs = src_ref.crs\n\n# Reproject the filtered GeoDataFrame if necessary.\nif filtered_gdf.crs != raster_crs:\n    filtered_gdf = filtered_gdf.to_crs(raster_crs)\n\nseasonal_mean_temps = []  # This will store the seasonal mean temperature for each polygon.\n\n# Loop over each polygon in the filtered GeoDataFrame.\nfor idx, row in filtered_gdf.iterrows():\n    geom = row['geometry']\n    monthly_means = []  # List to hold the mean for each raster (month) for this polygon.\n\n    # Process each raster file.\n    for raster_path in raster_files:\n        with rasterio.open(raster_path) as src:\n            try:\n                # Clip the raster to the current polygon geometry.\n                out_image, out_transform = mask(src, [mapping(geom)], crop=True)\n                # Reshape the output so that each band is a 1D array.\n                data = out_image.reshape(out_image.shape[0], -1)\n\n                # Replace nodata values with NaN.\n                if src.nodata is not None:\n                    data = np.where(data == src.nodata, np.nan, data)\n\n                # Count valid (non-NaN) pixels.\n                valid_pixels = np.count_nonzero(~np.isnan(data))\n                if valid_pixels &gt; 0:\n                    # Compute the mean for this raster (month) and apply the scale factor if needed.\n                    month_mean = np.nanmean(data) * scale_factor\n                    monthly_means.append(month_mean)\n                else:\n                    monthly_means.append(np.nan)\n            except Exception as e:\n                print(f\"Error processing polygon index {idx} in file {raster_path}: {e}\")\n                monthly_means.append(np.nan)\n\n    # Compute the seasonal mean by averaging the monthly means (ignoring NaN values).\n    if monthly_means and np.count_nonzero(~np.isnan(monthly_means)) &gt; 0:\n        seasonal_mean = np.nanmean(monthly_means)\n    else:\n        seasonal_mean = np.nan\n    seasonal_mean_temps.append(seasonal_mean)\nfiltered_gdf['seasonal_mean_temp'] = seasonal_mean_temps\n\ndisplay(filtered_gdf.head())\n\n\n\n\n\n\n\n\nGISJOIN\nZCTA5CE20\nGEOID20\nGEOIDFQ20\nCLASSFP20\nMTFCC20\nFUNCSTAT20\nALAND20\nAWATER20\nINTPTLAT20\nINTPTLON20\nShape_Leng\nShape_Area\nORIG_FID\ngeometry\nseasonal_mean_temp\n\n\n\n\n9755\nG30002\n30002\n30002\n860Z200US30002\nB5\nG6350\nS\n4396684.0\n35621.0\n+33.7733346\n-084.2616669\n15215.757214\n4.432313e+06\n8988\nPOLYGON ((-84.2465 33.78705, -84.24628 33.7861...\nNaN\n\n\n9756\nG30004\n30004\n30004\n860Z200US30004\nB5\nG6350\nS\n150061243.0\n1833185.0\n+34.1456348\n-084.2918814\n111252.827546\n1.518944e+08\n10167\nPOLYGON ((-84.21052 34.12945, -84.21102 34.128...\n8.958090\n\n\n9757\nG30005\n30005\n30005\n860Z200US30005\nB5\nG6350\nS\n40898014.0\n897460.0\n+34.0890498\n-084.2170187\n44413.582070\n4.179547e+07\n10173\nPOLYGON ((-84.17622 34.08231, -84.17579 34.082...\n9.017966\n\n\n9758\nG30008\n30008\n30008\n860Z200US30008\nB5\nG6350\nS\n24713437.0\n27393.0\n+33.9005668\n-084.5909235\n40124.671955\n2.474083e+07\n7121\nMULTIPOLYGON (((-84.63255 33.86278, -84.63254 ...\n9.829101\n\n\n9759\nG30009\n30009\n30009\n860Z200US30009\nB5\nG6350\nS\n23587579.0\n200005.0\n+34.0781363\n-084.3034243\n43656.113886\n2.378760e+07\n10176\nMULTIPOLYGON (((-84.33045 34.09605, -84.33056 ...\n8.983466\n\n\n\n\n\n\n\n\nax = filtered_gdf.plot(column='seasonal_mean_temp', cmap='coolwarm', legend=True, figsize=(10, 10))\nax.set_title('DJF  Mean Temperature by ZIP Code')\nax.set_axis_off()\nplt.show()"
  },
  {
    "objectID": "demo.html#code-courtesy-of-rudra-kanani",
    "href": "demo.html#code-courtesy-of-rudra-kanani",
    "title": "Mean Temperature By Season (GA, TX)",
    "section": "",
    "text": "GA Autumn"
  }
]